#define MP_MAX_UNCOMPRESSED_TEXT_LEN (73)
MP_COMPRESSED_DATA("invali\344can'\364'%q\247mus\364objec\364argument\363argumen\364functio\356forma\364no\364b\345Wif\351keywor\344require\344'%s\247fo\362t\357conver\364strin\347o\346specifie\362typ\345inde\370lengt\350Invali\344supporte\344wit\350%\344ar\347empt\371implemente\344i\356isn'\364multipl\345assignmen\364identifie\362positiona\354doesn'\364UUI\304attribut\345erro\362expectin\347generato\362rang\345\341ou\364synta\370to\357expecte\344o\362fro\355allowe\344alread\371an\344comple\370ha\363intege\362missin\347n\357outsid\345tupl\345unknow\356unsupporte\344valu\345a\356buffe\362numbe\362in\364nam\345operatio\356pi\356Erro\362Interna\354fiel\344foun\344need\363nonloca\354para\355sequenc\345No\364SP\311ba\344betwee\356bu\364indice\363struct\272%\361arg\363characteristi\343dic\364i\363lis\364lon\347zer\357TCP/I\320impor\364memor\371specificatio\356value\363incompatibl\345issubclass(\251%\363afte\362byte\363clas\363give\356ke\371loca\354non-keywor\344o\356stor\345wron\347allocatio\356conversio\356descripto\362expressio\356implicitl\371incomplet\345unexpecte\344automati\343bit\363frequenc\371hav\345hea\360integers\254numberin\347onl\371redefine\344")
MP_MATCH_COMPRESSED("%c needs int or char", "\377%c\313\303\261char")
MP_MATCH_COMPRESSED("%q index out of range", "\377\326\226\255\223\253")
MP_MATCH_COMPRESSED("%q indices must be integers, not %s", "\377\326\324\203\212\374\211\345")
MP_MATCH_COMPRESSED("'%q' argument required", "\377\202\206\215")
MP_MATCH_COMPRESSED("'%s' object doesn't support item assignment", "\377\216\204\245support item\242")
MP_MATCH_COMPRESSED("'%s' object doesn't support item deletion", "\377\216\204\245support item deletion")
MP_MATCH_COMPRESSED("'%s' object has no attribute '%q'", "\377\216\204\267\272\247\202")
MP_MATCH_COMPRESSED("'%s' object isn't an iterator", "\377\216\204\240\300iterator")
MP_MATCH_COMPRESSED("'%s' object isn't callable", "\377\216\204\240callable")
MP_MATCH_COMPRESSED("'%s' object isn't iterable", "\377\216\204\240iterable")
MP_MATCH_COMPRESSED("'%s' object isn't subscriptable", "\377\216\204\240subscriptable")
MP_MATCH_COMPRESSED("'=' alignment not allowed in string format specifier", "\377'=' alignment\211\263\237\222\210\224")
MP_MATCH_COMPRESSED("'await' outside function", "\377'await'\273\207")
MP_MATCH_COMPRESSED("'break'/'continue' outside loop", "\377'break'/'continue'\273loop")
MP_MATCH_COMPRESSED("'return' outside function", "\377'return'\273\207")
MP_MATCH_COMPRESSED("'yield' outside function", "\377'yield'\273\207")
MP_MATCH_COMPRESSED("*x must be assignment target", "\377*x\203\212\242target")
MP_MATCH_COMPRESSED("0.0 to a complex power", "\3770.0\220\254\266power")
MP_MATCH_COMPRESSED("AP required", "\377AP\215")
MP_MATCH_COMPRESSED("I/O operation on closed file", "\377I/O\305\355closed file")
MP_MATCH_COMPRESSED("I2C operation not supported", "\377I2C\305\211\231")
MP_MATCH_COMPRESSED("I2C(%d) doesn't exist", "\377I2C(%d)\245exist")
MP_MATCH_COMPRESSED("IV", "IV")
MP_MATCH_COMPRESSED("LHS of keyword arg must be an id", "\377LHS\223\214\234\203\212\300id")
MP_MATCH_COMPRESSED("PWM not supported on pin %d", "\377PWM\211\231\355\306\233")
MP_MATCH_COMPRESSED("SPI ID must be either HSPI(1) or VSPI(2)", "\377\320ID\203\212either HSPI(1)\261VSPI(2)")
MP_MATCH_COMPRESSED("SPI bus already freed", "\377\320bus\264freed")
MP_MATCH_COMPRESSED("SPI device already freed", "\377\320device\264freed")
MP_MATCH_COMPRESSED("SPI host already in use", "\377\320host\264\237use")
MP_MATCH_COMPRESSED("STA must be active", "\377STA\203\212active")
MP_MATCH_COMPRESSED("STA required", "\377STA\215")
MP_MATCH_COMPRESSED("TCP/IP DHCP Client Start Failed", "\377\336DHCP Client Start Failed")
MP_MATCH_COMPRESSED("TCP/IP IF Not Ready", "\377\336IF\317Ready")
MP_MATCH_COMPRESSED("TCP/IP Invalid Parameters", "\377\336\230Parameters")
MP_MATCH_COMPRESSED("Touch pad error", "\377Touch pad\250")
MP_MATCH_COMPRESSED("UART(%d) does not exist", "\377UART(%d) does\211exist")
MP_MATCH_COMPRESSED("UART(%d) is disabled (dedicated to REPL)", "\377UART(%d)\332disabled (dedicated\220REPL)")
MP_MATCH_COMPRESSED("UUID too long", "\377\246\257\334")
MP_MATCH_COMPRESSED("UUID too short", "\377\246\257short")
MP_MATCH_COMPRESSED("WDT timeout too short", "\377WDT timeout\257short")
MP_MATCH_COMPRESSED("Wifi Internal Error", "\377\213\310\307")
MP_MATCH_COMPRESSED("Wifi Internal NVS Error", "\377\213\310NVS\307")
MP_MATCH_COMPRESSED("Wifi Internal State Error", "\377\213\310State\307")
MP_MATCH_COMPRESSED("Wifi Invalid Interface", "\377\213\230Interface")
MP_MATCH_COMPRESSED("Wifi Invalid MAC Address", "\377\213\230MAC Address")
MP_MATCH_COMPRESSED("Wifi Invalid Mode", "\377\213\230Mode")
MP_MATCH_COMPRESSED("Wifi Invalid Password", "\377\213\230Password")
MP_MATCH_COMPRESSED("Wifi Not Connected", "\377\213\317Connected")
MP_MATCH_COMPRESSED("Wifi Not Initialized", "\377\213\317Initialized")
MP_MATCH_COMPRESSED("Wifi Not Started", "\377\213\317Started")
MP_MATCH_COMPRESSED("Wifi Not Stopped", "\377\213\317Stopped")
MP_MATCH_COMPRESSED("Wifi SSID Invalid", "\377\213SSID\230")
MP_MATCH_COMPRESSED("Wifi Unknown Error 0x%04x", "\377\213Unknown\3070x%04x")
MP_MATCH_COMPRESSED("Wifi Wakeup Failure", "\377\213Wakeup Failure")
MP_MATCH_COMPRESSED("Wifi Would Block", "\377\213Would Block")
MP_MATCH_COMPRESSED("__init__() should return None, not '%s'", "\377__init__() should return None,\211\216")
MP_MATCH_COMPRESSED("abort() called", "abort() called")
MP_MATCH_COMPRESSED("address %08x is not aligned to %d bytes", "\377address %08x\332\211aligned\220\233\347")
MP_MATCH_COMPRESSED("annotation must be an identifier", "\377annotation\203\212\300\243")
MP_MATCH_COMPRESSED("arg is an empty sequence", "\377\234\332\300\235\316")
MP_MATCH_COMPRESSED("arg must be user-type", "\377\234\203\212user-type")
MP_MATCH_COMPRESSED("argument has wrong type", "\377\206\267\357\225")
MP_MATCH_COMPRESSED("argument name reused", "\377\206\304reused")
MP_MATCH_COMPRESSED("argument num/types mismatch", "\377\206num/types mismatch")
MP_MATCH_COMPRESSED("array/bytes required on right side", "\377array/bytes\215\355right side")
MP_MATCH_COMPRESSED("attributes not supported yet", "\377attributes\211\231yet")
MP_MATCH_COMPRESSED("bad compile mode", "\377\321compile mode")
MP_MATCH_COMPRESSED("bad conversion specifier", "\377\321\361\224")
MP_MATCH_COMPRESSED("bad frequency %d", "\377\321\371\233")
MP_MATCH_COMPRESSED("bad typecode", "\377\321typecode")
MP_MATCH_COMPRESSED("bad wake value", "\377\321wake\277")
MP_MATCH_COMPRESSED("binary op %q not implemented", "\377binary op\326\211\236")
MP_MATCH_COMPRESSED("bits must be 8", "\377\370\203\2128")
MP_MATCH_COMPRESSED("blksize % 16", "blksize % 16")
MP_MATCH_COMPRESSED("buffer too long", "\377\301\257\334")
MP_MATCH_COMPRESSED("buffer too small", "\377\301\257small")
MP_MATCH_COMPRESSED("buffers must be the same length", "\377buffers\203\212the same\227")
MP_MATCH_COMPRESSED("bytes value out of range", "\377\347\277\255\223\253")
MP_MATCH_COMPRESSED("can query only one param", "\377can query\376one\315")
MP_MATCH_COMPRESSED("can't add special method to already-subclassed class", "\377\201add special method\220already-subclassed\350")
MP_MATCH_COMPRESSED("can't assign to expression", "\377\201assign\220\363")
MP_MATCH_COMPRESSED("can't cancel self", "\377\201cancel self")
MP_MATCH_COMPRESSED("can't convert %s to complex", "\377\201\221\345\220\266")
MP_MATCH_COMPRESSED("can't convert %s to float", "\377\201\221\345\220float")
MP_MATCH_COMPRESSED("can't convert %s to int", "\377\201\221\345\220\303")
MP_MATCH_COMPRESSED("can't convert '%q' object to %q implicitly", "\377\201\221\202\204\220\326\364")
MP_MATCH_COMPRESSED("can't convert NaN to int", "\377\201\221NaN\220\303")
MP_MATCH_COMPRESSED("can't convert inf to int", "\377\201\221inf\220\303")
MP_MATCH_COMPRESSED("can't create '%q' instances", "\377\201create\202instances")
MP_MATCH_COMPRESSED("can't create thread", "\377\201create thread")
MP_MATCH_COMPRESSED("can't declare nonlocal in outer code", "\377\201declare\314\237outer code")
MP_MATCH_COMPRESSED("can't delete expression", "\377\201delete\363")
MP_MATCH_COMPRESSED("can't do binary op between '%q' and '%q'", "\377\201do binary op\322\202\265\202")
MP_MATCH_COMPRESSED("can't encrypt & decrypt", "\377\201encrypt & decrypt")
MP_MATCH_COMPRESSED("can't have multiple **x", "\377\201\372\241**x")
MP_MATCH_COMPRESSED("can't have multiple *x", "\377\201\372\241*x")
MP_MATCH_COMPRESSED("can't implicitly convert '%q' to 'bool'", "\377\201\364\221\202\220'bool'")
MP_MATCH_COMPRESSED("can't import name %q", "\377\201\337\304\326")
MP_MATCH_COMPRESSED("can't load from '%q'", "\377\201load\262\202")
MP_MATCH_COMPRESSED("can't load with '%q' index", "\377\201load\232\202\226")
MP_MATCH_COMPRESSED("can't perform relative import", "\377\201perform relative\337")
MP_MATCH_COMPRESSED("can't send non-None value to a just-started generator", "\377\201send non-None\277\220\254just-started\252")
MP_MATCH_COMPRESSED("can't set attribute", "\377\201set\247")
MP_MATCH_COMPRESSED("can't specify pos and kw args", "\377\201specify pos\265kw\327")
MP_MATCH_COMPRESSED("can't store '%q'", "\377\201\356\202")
MP_MATCH_COMPRESSED("can't store to '%q'", "\377\201\356\220\202")
MP_MATCH_COMPRESSED("can't store with '%q' index", "\377\201\356\232\202\226")
MP_MATCH_COMPRESSED("can't switch from automatic field numbering to manual field specification", "\377\201switch\262\367\311\375\220manual\311\341")
MP_MATCH_COMPRESSED("can't switch from manual field specification to automatic field numbering", "\377\201switch\262manual\311\341\220\367\311\375")
MP_MATCH_COMPRESSED("can't truncate-divide a complex number", "\377\201truncate-divide\254\266\302")
MP_MATCH_COMPRESSED("can't unambiguously get sizeof scalar", "\377\201unambiguously get sizeof scalar")
MP_MATCH_COMPRESSED("casting", "casting")
MP_MATCH_COMPRESSED("chr() arg not in range(0x110000)", "\377chr()\234\211\237range(0x110000)")
MP_MATCH_COMPRESSED("clock_div must be between 1 and 255", "\377clock_div\203\212\3221\265255")
MP_MATCH_COMPRESSED("comparison of int and uint", "\377comparison\223\303\265uint")
MP_MATCH_COMPRESSED("complex divide by zero", "\377\266divide by\335")
MP_MATCH_COMPRESSED("compression header", "compression header")
MP_MATCH_COMPRESSED("constant must be an integer", "\377constant\203\212\300\270")
MP_MATCH_COMPRESSED("conversion to object", "\377\361\220\204")
MP_MATCH_COMPRESSED("default 'except' must be last", "\377default 'except'\203\212last")
MP_MATCH_COMPRESSED("dict update sequence has wrong length", "\377\331update\316\267\357\227")
MP_MATCH_COMPRESSED("div/mod not implemented for uint", "\377div/mod\211\236\217uint")
MP_MATCH_COMPRESSED("divide by zero", "\377divide by\335")
MP_MATCH_COMPRESSED("either pos or kw args are allowed", "\377either pos\261kw\327are\263")
MP_MATCH_COMPRESSED("empty", "\377\235")
MP_MATCH_COMPRESSED("empty heap", "\377\235\373")
MP_MATCH_COMPRESSED("empty separator", "\377\235separator")
MP_MATCH_COMPRESSED("error in regex", "\377\250\237regex")
MP_MATCH_COMPRESSED("esp_sleep_enable_touchpad_wakeup() failed", "esp_sleep_enable_touchpad_wakeup() failed")
MP_MATCH_COMPRESSED("exceptions must derive from BaseException", "\377exceptions\203derive\262BaseException")
MP_MATCH_COMPRESSED("expected ':' after format specifier", "\377\260':'\346\210\224")
MP_MATCH_COMPRESSED("expecting a dict for keyword args", "\377\251\254\331\217\214\327")
MP_MATCH_COMPRESSED("expecting a pin", "\377\251\254\306")
MP_MATCH_COMPRESSED("expecting just a value for set", "\377\251just\254\277\217set")
MP_MATCH_COMPRESSED("expecting key:value for dict", "\377\251key:value\217\331")
MP_MATCH_COMPRESSED("extra keyword arguments given", "\377extra\214\205\351")
MP_MATCH_COMPRESSED("extra positional arguments given", "\377extra\244\205\351")
MP_MATCH_COMPRESSED("firstbit must be MSB", "\377firstbit\203\212MSB")
MP_MATCH_COMPRESSED("format needs a dict", "\377\210\313\254\331")
MP_MATCH_COMPRESSED("format string didn't convert all arguments", "\377\210\222didn't\221all\205")
MP_MATCH_COMPRESSED("format string needs more arguments", "\377\210\222\313more\205")
MP_MATCH_COMPRESSED("frequency must be 20MHz, 40MHz, 80Mhz, 160MHz or 240MHz", "\377\371\203\21220MHz, 40MHz, 80Mhz, 160MHz\261240MHz")
MP_MATCH_COMPRESSED("full", "full")
MP_MATCH_COMPRESSED("function doesn't take keyword arguments", "\377\207\245take\214\205")
MP_MATCH_COMPRESSED("function expected at most %d arguments, got %d", "\377\207\260at most\233arguments, got\233")
MP_MATCH_COMPRESSED("function got multiple values for argument '%q'", "\377\207got\241\342\217\206\202")
MP_MATCH_COMPRESSED("function missing %d required positional arguments", "\377\207\271\233\215\244\205")
MP_MATCH_COMPRESSED("function missing keyword-only argument", "\377\207\271keyword-only\206")
MP_MATCH_COMPRESSED("function missing required keyword argument '%q'", "\377\207\271\215\214\206\202")
MP_MATCH_COMPRESSED("function missing required positional argument #%d", "\377\207\271\215\244\206#%d")
MP_MATCH_COMPRESSED("function takes %d positional arguments but %d were given", "\377\207takes\233\244\205\323\233were\351")
MP_MATCH_COMPRESSED("generator already executing", "\377\252\264executing")
MP_MATCH_COMPRESSED("generator ignored GeneratorExit", "\377\252ignored GeneratorExit")
MP_MATCH_COMPRESSED("generator raised StopIteration", "\377\252raised StopIteration")
MP_MATCH_COMPRESSED("heap must be a list", "\377\373\203\212\254\333")
MP_MATCH_COMPRESSED("identifier redefined as global", "\377\243\377as global")
MP_MATCH_COMPRESSED("identifier redefined as nonlocal", "\377\243\377as\314")
MP_MATCH_COMPRESSED("import * not at module level", "\377\337*\211at module level")
MP_MATCH_COMPRESSED("incompatible .mpy arch", "\377\343.mpy arch")
MP_MATCH_COMPRESSED("incompatible .mpy file", "\377\343.mpy file")
MP_MATCH_COMPRESSED("incomplete format", "\377\365\210")
MP_MATCH_COMPRESSED("incomplete format key", "\377\365\210\352")
MP_MATCH_COMPRESSED("incorrect padding", "incorrect padding")
MP_MATCH_COMPRESSED("int() arg 2 must be >= 2 and <= 36", "\377int()\2342\203\212>= 2\265<= 36")
MP_MATCH_COMPRESSED("integer needed", "\377\270needed")
MP_MATCH_COMPRESSED("invalid Pin for ADC", "\377\200Pin\217ADC")
MP_MATCH_COMPRESSED("invalid Pin for DAC", "\377\200Pin\217DAC")
MP_MATCH_COMPRESSED("invalid UUID", "\377\200\246")
MP_MATCH_COMPRESSED("invalid WLAN interface identifier", "\377\200WLAN interface\243")
MP_MATCH_COMPRESSED("invalid addr", "\377\200addr")
MP_MATCH_COMPRESSED("invalid arguments", "\377\200\205")
MP_MATCH_COMPRESSED("invalid buffer length", "\377\200\301\227")
MP_MATCH_COMPRESSED("invalid callback", "\377\200callback")
MP_MATCH_COMPRESSED("invalid cert", "\377\200cert")
MP_MATCH_COMPRESSED("invalid char in UUID", "\377\200char\237\246")
MP_MATCH_COMPRESSED("invalid characteristic UUID", "\377\200\330\246")
MP_MATCH_COMPRESSED("invalid characteristic tuple", "\377\200\330\274")
MP_MATCH_COMPRESSED("invalid configuration", "\377\200configuration")
MP_MATCH_COMPRESSED("invalid data bits", "\377\200data\370")
MP_MATCH_COMPRESSED("invalid descriptor UUID", "\377\200\362\246")
MP_MATCH_COMPRESSED("invalid dupterm index", "\377\200dupterm\226")
MP_MATCH_COMPRESSED("invalid format", "\377\200\210")
MP_MATCH_COMPRESSED("invalid format specifier", "\377\200\210\224")
MP_MATCH_COMPRESSED("invalid inversion mask", "\377\200inversion mask")
MP_MATCH_COMPRESSED("invalid key", "\377\200\352")
MP_MATCH_COMPRESSED("invalid micropython decorator", "\377\200micropython decorator")
MP_MATCH_COMPRESSED("invalid pin", "\377\200\306")
MP_MATCH_COMPRESSED("invalid pin for touchpad", "\377\200\306\217touchpad")
MP_MATCH_COMPRESSED("invalid pin for wake", "\377\200\306\217wake")
MP_MATCH_COMPRESSED("invalid service UUID", "\377\200service\246")
MP_MATCH_COMPRESSED("invalid stop bits", "\377\200stop\370")
MP_MATCH_COMPRESSED("invalid syntax", "\377\200\256")
MP_MATCH_COMPRESSED("invalid syntax for integer with base %d", "\377\200\256\217\270\232base\233")
MP_MATCH_COMPRESSED("invalid syntax for number", "\377\200\256\217\302")
MP_MATCH_COMPRESSED("issubclass() arg 1 must be a class", "\377\344\2341\203\212\254\350")
MP_MATCH_COMPRESSED("issubclass() arg 2 must be a class or a tuple of classes", "\377\344\2342\203\212\254\350\261\254\274\223classes")
MP_MATCH_COMPRESSED("join expects a list of str/bytes objects consistent with self object", "\377join expects\254\333\223str/bytes objects consistent\232self\204")
MP_MATCH_COMPRESSED("key", "\377\352")
MP_MATCH_COMPRESSED("keyword argument(s) not yet implemented - use normal args instead", "\377\214argument(s)\211yet\236- use normal\327instead")
MP_MATCH_COMPRESSED("lhs and rhs should be compatible", "\377lhs\265rhs should\212compatible")
MP_MATCH_COMPRESSED("local '%q' has type '%q' but source is '%q'", "\377\353\202\267\225\202\323source\332\202")
MP_MATCH_COMPRESSED("local '%q' used before type known", "\377\353\202used before\225known")
MP_MATCH_COMPRESSED("local variable referenced before assignment", "\377\353variable referenced before\242")
MP_MATCH_COMPRESSED("math domain error", "\377math domain\250")
MP_MATCH_COMPRESSED("memory allocation failed, allocating %u bytes", "\377\340\360failed, allocating %u\347")
MP_MATCH_COMPRESSED("memory allocation failed, heap is locked", "\377\340\360failed,\373\332locked")
MP_MATCH_COMPRESSED("mktime needs a tuple of length 8 or 9 (%d given)", "\377mktime\313\254\274\223\2278\2619 (%d given)")
MP_MATCH_COMPRESSED("mode", "mode")
MP_MATCH_COMPRESSED("multiple *x in assignment", "\377\241*x\237\242")
MP_MATCH_COMPRESSED("multiple bases have instance lay-out conflict", "\377\241bases\372instance lay-out conflict")
MP_MATCH_COMPRESSED("must query one param", "\377\203query one\315")
MP_MATCH_COMPRESSED("must raise an object", "\377\203raise\300\204")
MP_MATCH_COMPRESSED("must specify all of sck/mosi/miso", "\377\203specify all\223sck/mosi/miso")
MP_MATCH_COMPRESSED("must use keyword argument for key function", "\377\203use\214\206\217\352\207")
MP_MATCH_COMPRESSED("name '%q' isn't defined", "\377\304\202\240defined")
MP_MATCH_COMPRESSED("name too long", "\377\304\257\334")
MP_MATCH_COMPRESSED("native yield", "native yield")
MP_MATCH_COMPRESSED("need more than %d values to unpack", "\377need more than\233\342\220unpack")
MP_MATCH_COMPRESSED("negative shift count", "negative shift count")
MP_MATCH_COMPRESSED("no active exception to reraise", "\377\272active exception\220reraise")
MP_MATCH_COMPRESSED("no binding for nonlocal found", "\377\272binding\217\314\312")
MP_MATCH_COMPRESSED("no free slots", "\377\272free slots")
MP_MATCH_COMPRESSED("no module named '%q'", "\377\272module named\202")
MP_MATCH_COMPRESSED("no resources", "\377\272resources")
MP_MATCH_COMPRESSED("non-default argument follows default argument", "\377non-default\206follows default\206")
MP_MATCH_COMPRESSED("non-hex digit found", "\377non-hex digit\312")
MP_MATCH_COMPRESSED("non-keyword arg after */**", "\377\354\234\346*/**")
MP_MATCH_COMPRESSED("non-keyword arg after keyword arg", "\377\354\234\346\214\234")
MP_MATCH_COMPRESSED("object '%s' isn't a tuple or list", "\377\204\216\240\254\274\261\333")
MP_MATCH_COMPRESSED("object not in sequence", "\377\204\211\237\316")
MP_MATCH_COMPRESSED("object of type '%s' has no len()", "\377\204\223\225\216\267\272len()")
MP_MATCH_COMPRESSED("object with buffer protocol required", "\377\204\232\301protocol\215")
MP_MATCH_COMPRESSED("odd-length string", "\377odd-length\222")
MP_MATCH_COMPRESSED("only slices with step=1 (aka None) are supported", "\377\376slices\232step=1 (aka None) are\231")
MP_MATCH_COMPRESSED("opcode", "opcode")
MP_MATCH_COMPRESSED("ord() expected a character, but string of length %d found", "\377ord()\260\254character,\323\222\223\227\233\312")
MP_MATCH_COMPRESSED("out of PWM channels", "\377\255\223PWM channels")
MP_MATCH_COMPRESSED("out of memory", "\377\255\223\340")
MP_MATCH_COMPRESSED("output too small", "\377output\257small")
MP_MATCH_COMPRESSED("overflow converting long int to machine word", "\377overflow converting\334\303\220machine word")
MP_MATCH_COMPRESSED("parameter error", "\377parameter\250")
MP_MATCH_COMPRESSED("pin can only be input", "\377\306can\376\212input")
MP_MATCH_COMPRESSED("pop from an empty set", "\377pop\262\300\235set")
MP_MATCH_COMPRESSED("pop from empty list", "\377pop\262\235\333")
MP_MATCH_COMPRESSED("popitem(): dictionary is empty", "\377popitem(): dictionary\332\235")
MP_MATCH_COMPRESSED("pow() with 3 arguments requires integers", "\377pow()\2323\205requires integers")
MP_MATCH_COMPRESSED("queue overflow", "queue overflow")
MP_MATCH_COMPRESSED("requested length %d but object has length %d", "\377requested\227\233\323\204\267\227\233")
MP_MATCH_COMPRESSED("return expected '%q' but got '%q'", "\377return\260\202\323got\202")
MP_MATCH_COMPRESSED("rsplit(None,n)", "rsplit(None,n)")
MP_MATCH_COMPRESSED("schedule queue full", "schedule queue full")
MP_MATCH_COMPRESSED("sign not allowed in string format specifier", "\377sign\211\263\237\222\210\224")
MP_MATCH_COMPRESSED("sign not allowed with integer format specifier 'c'", "\377sign\211\263\232\270\210\224'c'")
MP_MATCH_COMPRESSED("single '}' encountered in format string", "\377single '}' encountered\237\210\222")
MP_MATCH_COMPRESSED("slice step can't be zero", "\377slice step\201\212\335")
MP_MATCH_COMPRESSED("slot number must be between 0 and 3 inclusive", "\377slot\302\203\212\3220\2653 inclusive")
MP_MATCH_COMPRESSED("splitting with sub-captures", "\377splitting\232sub-captures")
MP_MATCH_COMPRESSED("start must be 0 or 1", "\377start\203\2120\2611")
MP_MATCH_COMPRESSED("start/end indices", "\377start/end\324")
MP_MATCH_COMPRESSED("stream operation not supported", "\377stream\305\211\231")
MP_MATCH_COMPRESSED("string index out of range", "\377\222\226\255\223\253")
MP_MATCH_COMPRESSED("string indices must be integers, not %s", "\377\222\324\203\212\374\211\345")
MP_MATCH_COMPRESSED("struct: can't index", "\377\325\201\226")
MP_MATCH_COMPRESSED("struct: index out of range", "\377\325\226\255\223\253")
MP_MATCH_COMPRESSED("struct: no fields", "\377\325\272fields")
MP_MATCH_COMPRESSED("substring not found", "\377substring\211\312")
MP_MATCH_COMPRESSED("super() can't find self", "\377super()\201find self")
MP_MATCH_COMPRESSED("syntax error in JSON", "\377\256\250\237JSON")
MP_MATCH_COMPRESSED("syntax error in uctypes descriptor", "\377\256\250\237uctypes\362")
MP_MATCH_COMPRESSED("too many values to unpack (expected %d)", "\377\257many\342\220unpack (expected %d)")
MP_MATCH_COMPRESSED("transfer on deinitialized SPI", "\377transfer\355deinitialized\320")
MP_MATCH_COMPRESSED("tuple index out of range", "\377\274\226\255\223\253")
MP_MATCH_COMPRESSED("type '%q' isn't an acceptable base type", "\377\225\202\240\300acceptable base\225")
MP_MATCH_COMPRESSED("type object '%q' has no attribute '%q'", "\377\225\204\202\267\272\247\202")
MP_MATCH_COMPRESSED("type takes 1 or 3 arguments", "\377\225takes 1\2613\205")
MP_MATCH_COMPRESSED("unary op %q not implemented", "\377unary op\326\211\236")
MP_MATCH_COMPRESSED("unexpected indent", "\377\366indent")
MP_MATCH_COMPRESSED("unexpected keyword argument '%q'", "\377\366\214\206\202")
MP_MATCH_COMPRESSED("unicode name escapes", "\377unicode\304escapes")
MP_MATCH_COMPRESSED("unindent doesn't match any outer indent level", "\377unindent\245match any outer indent level")
MP_MATCH_COMPRESSED("unknown config param", "\377\275config\315")
MP_MATCH_COMPRESSED("unknown format code '%c' for object of type '%s'", "\377\275\210code '%c'\217\204\223\225\216")
MP_MATCH_COMPRESSED("unknown status param", "\377\275status\315")
MP_MATCH_COMPRESSED("unknown type '%q'", "\377\275\225\202")
MP_MATCH_COMPRESSED("unmatched '{' in format", "\377unmatched '{'\237\210")
MP_MATCH_COMPRESSED("unreadable attribute", "\377unreadable\247")
MP_MATCH_COMPRESSED("unsupported format character '%c' (0x%x) at index %d", "\377\276\210character '%c' (0x%x) at\226\233")
MP_MATCH_COMPRESSED("unsupported type for %q: '%s'", "\377\276\225\217%q:\216")
MP_MATCH_COMPRESSED("unsupported types for %q: '%s', '%s'", "\377\276types\217%q: '%s',\216")
MP_MATCH_COMPRESSED("value out of range", "\377\277\255\223\253")
MP_MATCH_COMPRESSED("width must be 1 or 4 (or 8 on slot 0)", "\377width\203\2121\2614 (or 8\355slot 0)")
MP_MATCH_COMPRESSED("wrong number of arguments", "\377\357\302\223\205")
MP_MATCH_COMPRESSED("zero step", "\377\335step")
// Total input length:      8151
// Total compressed length: 4177
// Total data length:       1151
// Predicted saving:        2823

// gzip length:             4669
// Percentage of gzip:      114.1%
// zlib length:             4657
// Percentage of zlib:      114.4%
